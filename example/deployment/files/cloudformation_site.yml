AWSTemplateFormatVersion: 2010-09-09

Description: Site resources for apig-wsgi test app

Parameters:

  PackageS3Bucket:
    Type: String

  PackageS3Key:
    Type: String

  PackageS3ObjectVersion:
    Type: String

  LambdaIAMRoleArn:
    Type: String

  VpcId:
      Type: String

  SubnetId1:
    Type: String

  SubnetId2:
    Type: String

Conditions:
  ShouldDeployAlb: !And
  - !Not [!Equals [!Ref VpcId, '']]
  - !Not [!Equals [!Ref SubnetId1, '']]
  - !Not [!Equals [!Ref SubnetId2, '']]

Resources:

  # Lambda

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref PackageS3Bucket
        S3Key: !Ref PackageS3Key
        S3ObjectVersion: !Ref PackageS3ObjectVersion
      Handler: testapp.wsgi.lambda_handler
      MemorySize: 128
      Role: !Ref LambdaIAMRoleArn
      Runtime: python3.9
      Timeout: 20

  # Function URL

  LambdaPermissionFunctionUrl:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunctionUrl
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: '*'
      FunctionUrlAuthType: NONE

  FunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt LambdaFunction.Arn
      AuthType: NONE

  # New style HTTP API

  LambdaPermissionAPIGW:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: agi-wsgi-testapp-httpapi
      Description: HTTP API
      ProtocolType: HTTP
      Target: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations

  HttpApiOverrides:
    Type: AWS::ApiGatewayV2::ApiGatewayManagedOverrides
    Properties:
      ApiId: !Sub ${HttpApi}
      Integration:
        PayloadFormatVersion: "2.0"

  # Old style REST API

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: apig-wsgi-testapp
      BinaryMediaTypes:
      - '*/*'

  RestApiRootANY:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !GetAtt RestApi.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations

  RestApiProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: '{proxy+}'

  RestApiProxyANY:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref RestApiProxy
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations

  Deployment:
    DependsOn: RestApiProxyANY
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi

  StageApi:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref RestApi
      DeploymentId: !Ref Deployment
      StageName: prod

  # ALB

  LambdaPermissionALB:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: elasticloadbalancing.amazonaws.com

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: ShouldDeployAlb
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref SubnetId1
        - !Ref SubnetId2
      SecurityGroups: [!Ref SecurityGroup]

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: ShouldDeployAlb
    DependsOn: LambdaPermissionALB
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt LambdaFunction.Arn
      TargetGroupAttributes:
        - Key: lambda.multi_value_headers.enabled
          Value: True

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: ShouldDeployAlb
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: ShouldDeployAlb
    Properties:
      GroupDescription: Allow http on port 80
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

Outputs:

  FunctionUrl:
    Value: !GetAtt FunctionUrl.FunctionUrl

  HttpApiUrl:
    Value: !GetAtt HttpApi.ApiEndpoint

  RestApiUrl:
    Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageApi}/

  AlbUrl:
    Value: !If
    - ShouldDeployAlb
    - !GetAtt LoadBalancer.DNSName
    - ''
